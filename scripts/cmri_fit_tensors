#!python
"""Script for fitting tensors."""

import argparse
from os.path import exists
import sys
import numpy as np
import numbers
import time
from scipy.ndimage import zoom

import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

import cmri.utils as utils
import cmri.roi as roi
from cmri.coords import LV_coords

from dipy.io.image import load_nifti, save_nifti
from dipy.io import read_bvals_bvecs
from dipy.core.gradients import gradient_table
import dipy.reconst.dti as dti
from dipy.reconst.dti import fractional_anisotropy, mean_diffusivity


def main(args):

    # set filename
    flnm = utils.Filename(args.filename, args.bfile, args.ext)

    # load data (could load with sitk and convert to NumPy)
    data, affine = load_nifti(flnm.filename)
    data = data.astype(np.float64)

    # load bdata
    bvals, bvecs = read_bvals_bvecs(flnm.bval, flnm.bvec)

    # fit tensors
    if args.tensors:

        # reorder and resign bvec columns
        if args.reorder is not None:
            print("reordering/resigning bvec columns")

            if len(args.reorder) != 9:
                raise ValueError("--reorder (-r) must have 9 entries")

            rot = np.array(args.reorder).reshape(3, 3)
            bvecs = (rot.dot(bvecs.T)).T

        # load mask
        if args.maskfile is not None:
            mask, _ = load_nifti(args.maskfile)
        else:
            mask = None #np.ones_like(data[..., 0])

        # load outliers file
        outlier_file = flnm.new("outliers", "txt")
        if exists(outlier_file):
            print("removing outliers with:", outlier_file)
            good_img = np.loadtxt(outlier_file).astype(int)
        else:
            print("no outliers file")
            good_img = np.ones(data.shape[-2:], dtype="int")

        # for saving results
        evecs = np.zeros(data.shape[0:3] + (3,3))
        evals = np.zeros(data.shape[0:3] + (3,))
        S0 = np.zeros(data.shape[0:3])

        # loop over slice
        for sdx in range(data.shape[2]):

            gidx = np.squeeze(np.argwhere(good_img[sdx]))
            gtab = gradient_table(bvals[gidx], bvecs[gidx, :], b0_threshold = bvals[gidx].min())

            # fit tensor model (only in mask region)
            tenmodel = dti.TensorModel(gtab, fit_method="LS", return_S0_hat=True)
            tenfit = tenmodel.fit(data[:, :, [sdx], gidx], mask) 
            evecs[:, :, sdx, :, :], evals[:, :, sdx, :], S0[:, :, sdx] = tenfit.evecs, tenfit.evals, tenfit.S0_hat

        # save tensor fit
        save_nifti(flnm.new('evecs'), evecs, affine)
        save_nifti(flnm.new('evals'), evals, affine)
        save_nifti(flnm.new('s0'), S0, affine)

        # save FA and MD
        FA = fractional_anisotropy(evals)
        MD = mean_diffusivity(evals)
        save_nifti(flnm.new('fa'), FA, affine)
        save_nifti(flnm.new('md'), MD, affine)


    # predict signal from fit
    if args.predict is not None:

        evecs, _ = load_nifti(flnm.new('evecs'))
        evals, _ = load_nifti(flnm.new('evals'))
        S0, _ = load_nifti(flnm.new('s0'))

        # fit tensor model
        dti_params = np.append(evals, evecs.reshape(evecs.shape[0:3] + (-1,)), axis=-1)
        bval_predict = args.predict
        gtab_new = gradient_table(np.full_like(bvals, bval_predict), bvecs, b0_threshold = bval_predict)

        # predict image signal
        data_f = dti.tensor_prediction(dti_params, gtab_new, S0)
        data_f = data_f.mean(axis=-1)
        save_nifti(flnm.new('b' + str(bval_predict) + '_predict'), data_f, affine)


    # select LV center
    if args.lvcent:

        try:
            val, _ = load_nifti(flnm.new('md'))
            LVcent = [] 
        except FileNotFoundError as e:
            print("Calculate tensors before trying to select LV center")
            sys.exit()

        # loop over slice
        for sdx in range(data.shape[2]):

             scalar_dict = [{"name": "md", "values": val[:, :, sdx]}, {"name": "gray", "values": data[:, :, sdx, :].mean(axis=-1)}]
             x, y = roi.Select_point(scalar_dict).run()
             LVcent = [x, y]
             np.savetxt(flnm.new('LVcenter_' + str(sdx), "txt"), np.array(LVcent))


    # calculate tensor angles
    if args.angles:

        # load diffusion tensors
        evecs, affine = load_nifti(flnm.new('evecs'))

        # for saving all slice results
        HA_all = np.zeros(evecs.shape[0:3])
        IA_all = np.zeros(evecs.shape[0:3])
        AA_all = np.zeros(evecs.shape[0:3])
        HA_proj_all = np.zeros(evecs.shape[0:3])
        TA_all = np.zeros(evecs.shape[0:3])
        E2A_proj_all = np.zeros(evecs.shape[0:3])

        # loop over slice
        for sdx in range(data.shape[2]):

            # create coordinate system
            if args.coords:
                coords = np.load(flnm.new("coords_" + str(sdx), "npy"))
                [rad, lon, cir] = [coords[..., idx] for idx in range(3)]
            else:
                LVcent = np.loadtxt(flnm.new('LVcenter_' + str(sdx), "txt"))
                rad, lon, cir = LV_coords(evecs.shape[0:2], LVcent)
            
            # determining directions of evecs wrt to LV coordinates
            # -----------------------------------------------------
            ls1 = np.einsum('ijk,ijk->ij', lon, evecs[:, :, sdx, :, 0])
            cs1 = np.einsum('ijk,ijk->ij', cir, evecs[:, :, sdx, :, 0])
            rs1 = np.einsum('ijk,ijk->ij', rad, evecs[:, :, sdx, :, 0])
            cs2 = np.einsum('ijk,ijk->ij', cir, evecs[:, :, sdx, :, 1])
            rs2 = np.einsum('ijk,ijk->ij', rad, evecs[:, :, sdx, :, 1])
            ls3 = np.einsum('ijk,ijk->ij', lon, evecs[:, :, sdx, :, 2])
            rs3 = np.einsum('ijk,ijk->ij', rad, evecs[:, :, sdx, :, 2])

            # for non-projected angles definitions HA, IA, AA, see the following paper
            # Agger and Stephenson, "Assessing Myocardial Architecture: The Challenges and Controversies", 2020, doi: 10.3390/jcdd7040047.

            # non-projection method for calculating helix angle HA
            # ----------------------------------------------------
            HA = np.degrees(np.arcsin(np.abs(ls1)))
            HA[(ls1 > 0) & (cs1 > 0)] = -HA[(ls1 > 0) & (cs1 > 0)]
            HA[(ls1 < 0) & (cs1 < 0)] = -HA[(ls1 < 0) & (cs1 < 0)]
            HA_all[:, :, sdx] = HA

            # non-projection method for calculating intrusion angle IA
            # --------------------------------------------------------
            IA = np.degrees(np.arcsin(np.abs(rs1)))
            IA[(ls1 > 0) & (rs1 < 0)] = -IA[(ls1 > 0) & (rs1 < 0)]
            IA[(ls1 < 0) & (rs1 > 0)] = -IA[(ls1 < 0) & (rs1 > 0)]
            IA_all[:, :, sdx] = IA

            # non-projection method for calculating aggregate angle AA (E3A)
            # --------------------------------------------------------------
            AA = np.degrees(np.arcsin(np.abs(rs3)))
            AA[(ls3 > 0) & (rs3 < 0)] = -AA[(ls3 > 0) & (rs3 < 0)]
            AA[(ls3 < 0) & (rs3 > 0)] = -AA[(ls3 < 0) & (rs3 > 0)]
            AA_all[:, :, sdx] = AA

            # projection method for calculating helix angle HA
            # ------------------------------------------------
            # 1. project e1 into long-circ (tangential) plane
            e1_lc = evecs[:, :, sdx, :, 0] - rs1[..., None]*rad
            e1_lc = e1_lc / np.linalg.norm(e1_lc, axis=-1)[..., None]
            # 2. angle with circ
            tmp = np.abs(np.einsum('ijk,ijk->ij', e1_lc, cir))
            HA_proj = np.degrees(np.arccos(tmp))
            HA_proj *= np.sign(HA)
            HA_proj_all[:, :, sdx] = HA_proj

            # projection method for calculating transverse angle TA
            # -----------------------------------------------------
            # method below is standard TA definition
            # (differs from Ferreira et al., "Evaluation of the impact...", 2018, doi: 10.1002/mrm.26850.)
            #
            # 1. project e1 into circ-rad (horizontal) plane
            e1_cr = evecs[:, :, sdx, :, 0] - ls1[..., None]*lon
            e1_cr = e1_cr / np.linalg.norm(e1_cr, axis=-1)[..., None]
            # 2. angle with circ 
            tmp = np.abs(np.einsum('ijk,ijk->ij', e1_cr, cir))
            TA = np.degrees(np.arccos(tmp))
            TA *= np.sign(IA)
            TA_all[:, :, sdx] = TA

            # projection method for calculating E2A
            # -------------------------------------
            # Ferreira et al., "In vivo cardiovascular...", 2014, doi:10.1186/s12968-014-0087-8
            # Ferreira et al., "Evaluation of the impact of strain...", 2018, doi: 10.1002/mrm.26850.
            # 
            # 1. project e2 into crossmyo-rad plane (normal to e1_lc)
            e2_mr = np.einsum('ijk,ijk->ij', e1_lc, evecs[:, :, sdx, :, 1])
            e2_mr = evecs[:, :, sdx, :, 1] - e2_mr[..., None]*e1_lc
            e2_mr = e2_mr / np.linalg.norm(e2_mr, axis=-1)[..., None]
            # 2. angle with long-circ plane
            tmp = np.einsum('ijk,ijk->ij', rad, e2_mr)
            E2A_proj = np.degrees(np.arcsin(np.abs(tmp)))
            # 3. rad and circ have opposite signs then make positive, else negative
            E2A_proj[(rs2 > 0) & (cs2 > 0)] = -E2A_proj[(rs2 > 0) & (cs2 > 0)]
            E2A_proj[(rs2 < 0) & (cs2 < 0)] = -E2A_proj[(rs2 < 0) & (cs2 < 0)]
            E2A_proj_all[:, :, sdx] = E2A_proj


        # save results
        save_nifti(flnm.new('ha'), HA_all, affine)
        save_nifti(flnm.new('ia'), IA_all, affine)
        save_nifti(flnm.new('aa'), AA_all, affine)
        save_nifti(flnm.new('hap'), HA_proj_all, affine)
        save_nifti(flnm.new('ta'), TA_all, affine)
        save_nifti(flnm.new('e2a'), E2A_proj_all, affine)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description = "Fit tensors and calculate various quantities.") 

    parser.add_argument("-f", "--filename", type = str, required = True,
                        help = "Name of NIFTI file")

    parser.add_argument("--ext", type = str, required = False, default = "nii",
                        choices = ["nii", "nii.gz"], help = "Extension for saved files")

    parser.add_argument("-b", "--bfile", type = str, required = True,
                        help = "Name of bval/bvec file, without extension")

    parser.add_argument("-r", "--reorder", type = int, nargs = "+", required = False,
                        help = "Rotation matrix for reordering / resigning bvec columns")

    parser.add_argument("-t", "--tensors", required = False, default = False,
                        action = "store_true", help = "Fit tensors and calculate tensor metrics")

    parser.add_argument("--predict", type = int, required = False, default = None,
                        help = "Predict average signal for bval specified here")

    parser.add_argument("-o", "--outliers", type = str, required = False,
                        default = None, help = "Specify file that indicates good images for fitting")

    parser.add_argument("-m", "--maskfile", type = str, required = False,
                        default = None, help = "Use a mask when identifying outliers")

    parser.add_argument("-l", "--lvcent", required = False, default = False,
                        action = "store_true", help = "Select LV center")

    parser.add_argument("-a", "--angles", required = False, default = False,
                        action = "store_true", help = "Calculate tensor angles")

    parser.add_argument("--coords", required = False, default = False,
                        action = "store_true", help = "Use local coordinate system to calculate angles")

    args = parser.parse_args()

    main(args)


#        # whether to calculate quanties in image coordinates or world coordinates
#        image_coords = True
#
#        # rotate bvecs (such that image cosines can be treated as np.eye(3))
#        if image_coords:
#            rot = affine[0:3, 0:3].copy()
#            for idx in range(3):
#                rot[:,idx] = rot[:,idx] / np.linalg.norm(rot[:,idx])
#            print("rot original:\n", rot)
#
#            # rotates it to match matlab - but then the images are stored differently in matlab code
#            if True:
#                print("rotating bvecs")
#                #rot = np.array([[0, +1, 0],
#                #                [-1, 0, 0],
#                #                [0, 0, -1]])
#                #rot = np.array([[0, +1, 0],
#                #                [+1, 0, 0],
#                #                [0, 0, +1]])
#
#                # for the dicom2nifti results
#                rot = np.array([[+1, 0, 0],
#                                [0, -1, 0],
#                                [0, 0, +1]])
#
#                # for the dcm2niix results, I am flipping the z-axis
#                rot = np.array([[+1, 0, 0],
#                                [0, +1, 0],
#                                [0, 0, -1]])


#    parser.add_argument("-u", "--upsample", required = False, default = False,
#                        action = "store_true", help = "Upsample at level of tensors")
#
#    # simple upsampling approach using Log-Euclidean metric
#    if args.upsample:
#
#        evecs, _ = load_nifti(flnm.new('evecs'))
#        evals, _ = load_nifti(flnm.new('evals'))
#        S0, _ = load_nifti(flnm.new('s0'))
#
#        # Log-Euclidean
#        log_evals = np.log(evals)
#        #test = np.einsum('ijkl,ijklm->', evals, evecs)  # evecs.T diag(evals) evecs
#        #LE = np.einsum('ijkml,ijkl,ijklm->ijklm', evecs, log_evals, evecs)  # evecs.T diag(evals) evecs
#        LE = np.einsum('ijkl,ijkml->ijkml', log_evals, evecs)  # evecs.T diag(evals) evecs # NOTE: seems okay
#        print(log_evals[0, 0, 0, :])
#        print(evecs[0, 0, 0, :, :])
#        print(LE[0, 0, 0, :, :])
#        LE = np.einsum('ijkol,ijkml->ijkom', evecs, LE)  # evecs.T diag(evals) evecs
#        print(LE.shape)
#        print(LE[0, 0, 0, :, :])
#        print("done!")
#
#        factor = 4
#
#        new_D = np.empty((factor*evecs.shape[0], factor*evecs.shape[1], evecs.shape[0], 3, 3))        
#        new_evecs = np.empty((factor*evecs.shape[0], factor*evecs.shape[1], evecs.shape[0], 3, 3))        
#        new_evals = np.empty((factor*evecs.shape[0], factor*evecs.shape[1], evecs.shape[0], 3))        
#
#        for sdx in range(evecs.shape[2]):
#
#            tmp = LE[:, :, sdx, :, :].reshape(evecs.shape[0], evecs.shape[1], 9)
#            print(tmp.shape)
#            print("before:", tmp[0,0].reshape(3,3))
#
#            tmp = zoom(tmp, zoom=(factor, factor, 1))  # NOTE: is symmetric matrix! should account for this by average D and D'
#            print(tmp.shape)
#            print("after:", tmp[0,0].reshape(3,3))
#            #tmp = tmp.reshape(:, :, 3, 3)  # final shape we want
#            tmp = tmp.reshape(-1, 3, 3)  # flatten the spatial dimension
#
#            # solve eigen-problem
#            q, v = np.linalg.eig(tmp)
#
#            # recreate tensor
#            D = np.einsum('il,iml->iml', np.exp(q), v)  # evecs.T diag(evals) evecs # NOTE: seems okay
#            D = np.einsum('iol,iml->iom', v, D)  # evecs.T diag(evals) evecs
#
#            # resolve eigenproblem
#            q, v = np.linalg.eig(D)
#            print(q.shape, v.shape)
#
#            new_evecs[:, :, sdx, :, :] = np.real(v.reshape(new_evecs.shape[0], new_evecs.shape[1], 3, 3))
#            new_evals[:, :, sdx, :] = np.real(q.reshape(new_evecs.shape[0], new_evecs.shape[1], 3))
#
#            if False:
#                q = q.reshape(2*evecs.shape[0], 2*evecs.shape[1], 3)
#                v = v.reshape(2*evecs.shape[0], 2*evecs.shape[1], 3, 3)
#                print(q.shape, v.shape)
#                
#                # recombine
#                D = np.einsum('ijl,ijml->ijml', np.exp(q), v)  # evecs.T diag(evals) evecs # NOTE: seems okay
#                D = np.einsum('ijol,ijml->ijom', v, D)  # evecs.T diag(evals) evecs
#
#                new_D[:, :, sdx, :, :]  = np.real(D)  # NOTE: should be real anyway
#
#
#        # interpolation at the image stage, like my original ideas, is probably better here
#
#        # check answer 
#        FA = fractional_anisotropy(new_evals[:, :, 0, :])
#        MD = mean_diffusivity(new_evals[:, :, 0, :])
#        print(MD.min(), MD.max(), FA.min(), FA.max())
#        fig, ax = plt.subplots(1,2)
#        ax[0].imshow(FA.T, cmap="turbo", vmin=0, vmax=1.0)
#        ax[1].imshow(MD.T, cmap="turbo", vmin=0, vmax=2.5e-3)
#        plt.show()

