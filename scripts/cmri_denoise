#!python
"""Script for denoising an image series and identifying outliers."""

import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

import argparse
from os.path import exists
import numpy as np
import numbers
import time
import matplotlib.pyplot as plt

import cmri.utils as utils
import cmri.roi as roi
from cmri.plot import Select_outliers

import SimpleITK as sitk

from dipy.io.image import load_nifti, save_nifti
from dipy.io import read_bvals_bvecs
from dipy.core.gradients import gradient_table

from dipy.denoise.localpca import localpca
from dipy.denoise.pca_noise_estimate import pca_noise_estimate

import dipy.reconst.dti as dti

def main(args):

    # set filename
    flnm = utils.Filename(args.filename, args.bfile, args.ext)

    # load data (could load with sitk and convert to NumPy)
    data, affine, img = load_nifti(flnm.filename, return_img = True)
    data = data.astype(np.float64)

    # ensure correct dimensions
    if data.ndim == 3:
        data = np.expand_dims(data, 2)

    # load bdata
    bvals, bvecs = read_bvals_bvecs(flnm.bval, flnm.bvec)


    # outlier detection
    if args.outliers:
        # TODO: write separate function for MI calculation

        # fit tensor model
        # for storing if images a good
        good_img = np.zeros(data.shape[-2:], dtype=int)

        # load mask
        if args.maskfile is not None:
            mask, _ = load_nifti(args.maskfile)
        else:
            mask = np.ones_like(data[..., 0])

        # loop over slices
        for sdx in range(data.shape[2]):
            print("\nslice:", sdx)

            # fit slice-by-slice
            gtab = gradient_table(bvals, bvecs, b0_threshold = bvals.min())
            tenmodel = dti.TensorModel(gtab, fit_method="LS", return_S0_hat=True)
            tenfit = tenmodel.fit(data[:, :, sdx])
            dti_params = np.dstack([tenfit.evals, tenfit.evecs.reshape(tenfit.shape[0:2] + (-1,))])  # NOTE: (given the reshaping in dti.tensor_prediction, this seems right)
            data_f = dti.tensor_prediction(dti_params, gtab, tenfit.S0_hat)

            # mask to sitk image
            static_mask = sitk.GetImageFromArray(mask[:, :, sdx])
            static_mask = sitk.Cast(static_mask, sitk.sitkUInt8)

            # calculate MI between data and data_f
            MI = np.zeros(data.shape[-1]) 
            for idx in range(data.shape[-1]):
                y = sitk.GetImageFromArray(data[:, :, sdx, idx])
                f = sitk.GetImageFromArray(data_f[:, :, idx])

                reg_meth = sitk.ImageRegistrationMethod()

                # NOTE: I need to communicate a 2D transform, without doing any transforming
                initial_transform = sitk.CenteredTransformInitializer(
                    y, f, sitk.Euler2DTransform(),
                    sitk.CenteredTransformInitializerFilter.GEOMETRY
                )
                reg_meth.SetInitialTransform(initial_transform) 

                # NOTE: I should only need one mask in theory
                reg_meth.SetMetricFixedMask(static_mask)
                reg_meth.SetMetricMovingMask(static_mask)

                reg_meth.SetMetricAsMattesMutualInformation()
                reg_meth.SetMetricSamplingStrategy(reg_meth.NONE)
                reg_meth.SetMetricSamplingPercentage(1.0)
                res = reg_meth.MetricEvaluate(y, f)

                MI[idx] = res

            # crop the images before the quality control GUI
            if args.maskfile is not None:
                x1, x2, y1, y2 = roi.square_from_mask(mask[:, :, sdx], return_indices=True)
            else:
                x1, x2, y1, y2 = 0, data.shape[0], 0, data.shape[1]
        
            # GUI to select threshold
            good_img[sdx, :] = Select_outliers(data[x1:x2, y1:y2, sdx], data_f[x1:x2, y1:y2], MI, bvals).run()

        # save 1d 'mask' (along acquisition dimension) of good images
        np.savetxt(flnm.new("outliers", "txt"), good_img, fmt='%d')


    # denoise with PCA
    if args.denoise:

        # how many unique (Bval, Bvec) do we have
        consider_unique = False  
        if consider_unique:
            NUM = data.shape[-1]
        else:
            tmp = bvals[:, None] * bvecs
            if False:
                NUM = np.unique(tmp, axis = 0).shape[0] # counts opposite directions as unique
            else:
                tmp *= np.sign(tmp[:, [0]])
                NUM = np.unique(tmp, axis = 0).shape[0] # counts opposite directions as equivalent

        # default patch size
        if args.radius is None:
            root = np.ceil(NUM ** (1./2))  # 2D
            root = root + 1 if (root % 2) == 0 else root  # make odd
            patch_radius = int((root - 1) / 2)  # suggested patch_radius
            print("Setting patch_radius to", patch_radius)
        else:
            patch_radius = args.radius

        # load mask file
        if args.maskfile is not None:
            print("Denoising for mask ROI only")
            mask, _ = load_nifti(args.maskfile)

        # load outliers file
        outlier_file = flnm.new("outliers", "txt")
        if exists(outlier_file):
            print("removing outliers with:", outlier_file)
            good_img = np.loadtxt(outlier_file).astype(int)
            save_outliers = True
        else:
            print("no outliers file")
            good_img = np.ones(data.shape[-2:], dtype="int")
            save_outliers = False

        # array for storing results
        data_denoised = data.copy()
        sigma = np.zeros(data.shape[0:3])

        # loop over slices
        for sdx in range(data.shape[2]):
            print("\nslice:", sdx)

            # crop the images before denoising, to save time
            if args.maskfile is not None:
                x1, x2, y1, y2 = roi.square_from_mask(mask[:, :, sdx], return_indices=True)
                x1 = x1 - 2*patch_radius if x1 - 2*patch_radius > 0 else 0
                x2 = x2 + 2*patch_radius if x2 + 2*patch_radius <= data.shape[0] else data.shape[0]
                y1 = y1 - 2*patch_radius if y1 - 2*patch_radius > 0 else 0
                y2 = y2 + 2*patch_radius if y2 + 2*patch_radius <= data.shape[1] else data.shape[1]
            else:
                x1, x2, y1, y2 = 0, data.shape[0], 0, data.shape[1]

            # use non-outliers only
            #gidx = np.squeeze(np.argwhere(good_img[sdx]))
            gidx = np.nonzero(good_img[sdx])
            data_good = data[x1:x2, y1:y2, [sdx], gidx]
            gtab = gradient_table(bvals[gidx], bvecs[gidx], b0_threshold = bvals[gidx].min())

            # estimate noise
            sigma[x1:x2, y1:y2, [sdx]] = pca_noise_estimate(data_good, gtab, patch_radius=patch_radius,
                                         correct_bias=True, smooth=3)

            # denoise array  # FIXME: this slicing won't work!
            data_denoised[x1:x2, y1:y2, [sdx], gidx] = localpca(data_good, sigma[x1:x2, y1:y2, [sdx]], tau_factor=2.3,
                                      patch_radius=patch_radius, suppress_warning=True)

        # save noise
        save_nifti(flnm.new("noise"), sigma, affine)

        # save denoised
        save_nifti(flnm.new("denoised"), data_denoised, affine)

        # save outliers again, for file naming reasons
        if save_outliers: 
            np.savetxt(flnm.new("denoised_outliers", "txt"), good_img, fmt='%d')


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description = "Denoise a 2D DWI series and identify outliers.") 

    parser.add_argument("-f", "--filename", type = str, required = True,
                        help = "Name of NIFTI file")

    parser.add_argument("--ext", type = str, required = False, default = "nii",
                        choices = ["nii", "nii.gz"], help = "Extension for saved files")

    parser.add_argument("-b", "--bfile", type = str, required = True,
                        help = "Name of bval/bvec file, without extension")

    parser.add_argument("-d", "--denoise", required = False, default = False,
                        action = "store_true", help = "Denoise with PCA")

    parser.add_argument("-r", "--radius", type = int, required = False,
                        default = None, help = "Patch radius for PCA denoising")

    parser.add_argument("-o", "--outliers", required = False, default = False,
                        action = "store_true", help = "Detect outliers")

    parser.add_argument("-m", "--maskfile", type = str, required = False,
                        default = None, help = "Use a mask when identifying outliers")

    parser.add_argument("-v", "--verbose", required = False, default = False,
                        action = "store_true", help = "Verbose optimization")

    args = parser.parse_args()

    main(args)


#    if False:
#        print(f)
#        print(y)
#
#        elastixImageFilter = sitk.ElastixImageFilter()
#        elastixImageFilter.SetFixedImage(y)
#        elastixImageFilter.SetMovingImage(f)
#
#        elastixImageFilter.SetParameter('NumberOfResolutions', '1')
#        elastixImageFilter.SetParameter('AutomaticTransformInitialization', 'false')
#
#        import IPython
#        IPython.embed()
