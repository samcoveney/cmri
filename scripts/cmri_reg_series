#!python
"""Script for registering an image series."""

import argparse
import numpy as np

from dipy.io.image import load_nifti, save_nifti
from dipy.io import read_bvals_bvecs
from dipy.core.gradients import gradient_table

import cmri.utils as utils
from cmri.roi import Select_mask
from cmri.reg import register_dwi_series
    

def main(args):

    # set filename
    flnm = utils.Filename(args.filename, args.bfile, args.ext)

    # set slice
    slice_index = args.slice

    # load data (could load with sitk and convert to NumPy)
    data, affine, img = load_nifti(flnm.filename, return_img = True)
    print("data shape:", data.shape)
    print("affine matrix:", affine)
    data = data[:, :, slice_index, :].astype(np.float64)

    # load bdata
    bvals, bvecs = read_bvals_bvecs(flnm.bval, flnm.bvec)
    gtab = gradient_table(bvals, bvecs, b0_threshold = bvals.min())

    # create a mask
    if args.mask:

        tmp = data[:, :, gtab.b0s_mask][..., args.b0ref]
        tmp = [{"name": "gray", "values": tmp}]
        mask = Select_mask(tmp).run()
        save_nifti(flnm.new("mask_" + str(slice_index)), mask, affine)

    # perform registration
    if args.reg:

        mask, _ = load_nifti(flnm.new("mask_" + str(slice_index)))

        reg_data = register_dwi_series(data, gtab=gtab, b0_ref=args.b0ref,\
                                       denoise=True, static_mask=mask,\
                                       verbose=args.verbose,\
                                       iterations=args.iter)

        save_nifti(flnm.new("reg_" + str(slice_index)), reg_data, affine)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description = "Register 2D DWI series using SimpleElastix.") 

    parser.add_argument("-f", "--filename", type = str, required = True,
                        help = "Name of NIFTI file")

    parser.add_argument("--ext", type = str, required = False, default = "nii",
                        choices = ["nii", "nii.gz"], help = "Extension for saved files")

    parser.add_argument("-b", "--bfile", type = str, required = True,
                        help = "Name of bval/bvec file, without extension")

    parser.add_argument("-s", "--slice", type = int, required = True,
                        help = "Slice index")

    parser.add_argument("--b0ref", type = int, required = False, default = 0,
                        help = "index of b0 images to use as reference image")

    parser.add_argument("-r", "--reg", required = False, default = False,
                        action = "store_true", help = "Registration")

    parser.add_argument("-m", "--mask", required = False, default = False,
                        action = "store_true", help = "Define a mask for current slice")

    parser.add_argument("-v", "--verbose", required = False, default = False,
                        action = "store_true", help = "Verbose optimization")

    parser.add_argument("-i", "--iter", type = int, required = False, default = None,
                        help = "number of iterations per resolution")

    args = parser.parse_args()

    main(args)

