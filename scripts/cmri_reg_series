#!python
"""Script for registering an image series."""

import argparse
import numpy as np

from dipy.io.image import load_nifti, save_nifti
from dipy.io import read_bvals_bvecs
from dipy.core.gradients import gradient_table

import cmri.utils as utils
from cmri.roi import Select_mask
from cmri.reg import register_dwi_series
    

def main(args):

    # set filename
    flnm = utils.Filename(args.filename, args.bfile, args.ext)

    # load data (could load with sitk and convert to NumPy)
    data, affine, img = load_nifti(flnm.filename, return_img = True)
    print("data shape:", data.shape)
    print("affine matrix:", affine)

    # set slice - either register all slices or just 1 slice
    if args.slice is not None:
        slice_list = [args.slice]
    else:
        slice_list = [sdx for sdx in range(data.shape[2])]

    # load bdata
    bvals, bvecs = read_bvals_bvecs(flnm.bval, flnm.bvec)
    gtab = gradient_table(bvals, bvecs, b0_threshold = bvals.min())

    # create a mask (and select reference image)
    if args.mask:

        # array for storing results
        masks = np.zeros([data.shape[0], data.shape[1], len(slice_list)], dtype=int)
        b0refs = np.zeros(len(slice_list), dtype=int)

        # loop over slices
        for sdx, slice_index in enumerate(slice_list):
            data_slice = data[:, :, slice_index, :].astype(np.float64)

            # use space bar to toggle image that will be used as reference
            tmp = [{"values": data_slice[:, :, gtab.b0s_mask][..., bdx], "name": "gray"} for bdx in range(gtab.b0s_mask.sum())]
            masks[:, :, sdx], b0refs[sdx] = Select_mask(tmp).run()

        # save masks
        if len(slice_list) < data.shape[2]:
            save_nifti(flnm.new("regmask_" + str(slice_index)), masks, affine)
            np.savetxt(flnm.new("fixedimage_"+ str(slice_index), "txt"), b0refs, fmt='%d')
        else:
            save_nifti(flnm.new("regmask"), masks, affine)
            np.savetxt(flnm.new("fixedimage", "txt"), b0refs, fmt='%d')


    # perform registration
    if args.reg:

        # array for storing results
        reg_data = np.zeros([data.shape[0], data.shape[1], len(slice_list), data.shape[3]])

        # load masks
        if len(slice_list) == data.shape[2]:
            masks, _ = load_nifti(flnm.new("regmask"))
            b0refs = np.loadtxt(flnm.new("fixedimage", "txt")).astype(int)
        else:
            masks = np.zeros(data.shape[0:3], dtype=int)
            b0refs = np.zeros(len(slice_list), dtype=int)
            for sdx, slice_index in enumerate(slice_list):
                masks[:, :, sdx], _ = load_nifti(flnm.new("regmask_" + str(slice_index)))
                b0refs[sdx] = np.loadtxt(flnm.new("fixedimage_"+ str(slice_index), "txt"))

        pipeline = ["rigid", "affine"] if args.type == "affine" else ["rigid"]

        # loop over slices
        for sdx, slice_index in enumerate(slice_list):
            print("\nslice:", slice_index)
            data_slice = data[:, :, slice_index, :].astype(np.float64)
            mask = masks[:, :, sdx]
            b0ref = int(b0refs[sdx])

            # FIXME: need option for pipeline=['rigid', 'affine']
            reg_data[:, :, sdx, :] = register_dwi_series(data_slice, gtab=gtab, b0_ref=b0ref,\
                                           denoise=True, static_mask=mask,\
                                           pipeline=pipeline,\
                                           verbose=args.verbose,\
                                           iterations=args.iter)

        # save registered images 
        if len(slice_list) < data.shape[2]:
            save_nifti(flnm.new("reg_" + str(slice_index)), reg_data, affine)
        else:
            save_nifti(flnm.new("reg"), reg_data, affine)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description = "Register 2D DWI series using SimpleElastix.") 

    parser.add_argument("-f", "--filename", type = str, required = True,
                        help = "Name of NIFTI file")

    parser.add_argument("--ext", type = str, required = False, default = "nii",
                        choices = ["nii", "nii.gz"], help = "Extension for saved files")

    parser.add_argument("-b", "--bfile", type = str, required = True,
                        help = "Name of bval/bvec file, without extension")

    parser.add_argument("-s", "--slice", type = int, required = False, default = None,
                        help = "Slice index, need only if desiring to register (or mask) one slice")

    parser.add_argument("-r", "--reg", required = False, default = False,
                        action = "store_true", help = "Registration")

    parser.add_argument("-t", "--type", required = False, default = "rigid",
                        choices = ["rigid", "affine"], help = "What registration to use (\"affine\" choice first uses \"rigid\".")

    parser.add_argument("-m", "--mask", required = False, default = False,
                        action = "store_true", help = "Define a mask for current slice")

    parser.add_argument("-v", "--verbose", required = False, default = False,
                        action = "store_true", help = "Verbose optimization")

    parser.add_argument("-i", "--iter", type = int, required = False, default = None,
                        help = "number of iterations per resolution")

    args = parser.parse_args()

    main(args)

